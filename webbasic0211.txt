-----------------------------------------------------------
							BASIC
-----------------------------------------------------------
 <!DOCTYPE html>
<html>
<body>

<h1>My First Heading</h1>
<p>My first paragraph.</p>

</body>
</html> 

------------------------------------------------------------
                           CSS
------------------------------------------------------------
<head>
<link rel="stylesheet" href="mystyle.css">
</head>

<style>
body {
  background-color: linen;
}

h1 {
  color: maroon;
  margin-left: 40px;
}
</style>

-------------------------------------------------------------
						JavaScript
-------------------------------------------------------------
 <script src="myScript.js"></script> 

<script>
document.getElementById("demo").innerHTML = "My First JavaScript";
</script> 

-------------------------------------------------------------------
						Framwork  1
-------------------------------------------------------------------
1. 安裝 React 環境
2. 創建組件
   import React from 'react';

	function HelloWorld() {
		return <h1>Hello, World!</h1>;
	}

	export default HelloWorld; 
	
3. 使用 JSX 語法
   function Greeting() {
    const name = "React";
    return <h1>Hello, {name}!</h1>;
  }
  
4. 渲染組件
  import React from 'react';
  import ReactDOM from 'react-dom';
  import './index.css';
  import Greeting from './Greeting';

  ReactDOM.render(
  <Greeting />,
  document.getElementById('root')
 );
 
5. 使用 state 和事件處理
  import React, { useState } from 'react';

 function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  );
 }

  export default Counter;
  
6. 使用 props 傳遞數據
  // 父組件
function App() {
  return <Hello name="React" />;
}

// 子組件
function Hello(props) {
  return <h1>Hello, {props.name}!</h1>;
}

7. 使用 Effect Hook (useEffect)

import React, { useState, useEffect } from 'react';

function FetchData() {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => setData(data));
  }, []); // 空陣列表示只在組件首次渲染時執行

  return (
    <div>
      <h1>Fetched Data</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
}

export default FetchData;


8. 組合和組件嵌套

function App() {
  return (
    <div>
      <Header />
      <MainContent />
      <Footer />
    </div>
  );
}

function Header() {
  return <header>Header Section</header>;
}

function MainContent() {
  return <main>Main Content Section</main>;
}

function Footer() {
  return <footer>Footer Section</footer>;
}


9. 處理條件渲染

function Greeting({ isLoggedIn }) {
  if (isLoggedIn) {
    return <h1>Welcome back!</h1>;
  } else {
    return <h1>Please log in.</h1>;
  }
}


10. 管理路由（React Router）

npm install react-router-dom


import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/home" component={Home} />
        <Route path="/about" component={About} />
      </Switch>
    </Router>
  );
}

function Home() {
  return <h1>Home Page</h1>;
}

function About() {
  return <h1>About Page</h1>;
}

export default App;

-------------------------------------------------------------------
						Framwork  2
-------------------------------------------------------------------
1. 安裝 Vue 環境
2. 創建 Vue 組件
  <template>
  <div>
    <h1>Hello, Vue!</h1>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
}
</script>

<style scoped>
h1 {
  color: #42b983;
}
</style>


3. 渲染 Vue 組件

import Vue from 'vue'
import App from './App.vue'

Vue.config.productionTip = false

new Vue({
  render: h => h(App),
}).$mount('#app')


4. 使用 data 和 methods

<template>
  <div>
    <p>You clicked {{ count }} times.</p>
    <button @click="increment">Click me</button>
  </div>
</template>

<script>
export default {
  name: 'Counter',
  data() {
    return {
      count: 0,
    }
  },
  methods: {
    increment() {
      this.count += 1
    }
  }
}
</script>


5. 使用 props 傳遞數據

<!-- Parent.vue -->
<template>
  <div>
    <Child :message="parentMessage" />
  </div>
</template>

<script>
import Child from './Child.vue'

export default {
  name: 'Parent',
  components: {
    Child
  },
  data() {
    return {
      parentMessage: 'Hello from Parent!'
    }
  }
}
</script>


6. 處理條件渲染

<template>
  <div>
    <p v-if="isLoggedIn">Welcome back!</p>
    <p v-else>Please log in.</p>
  </div>
</template>

<script>
export default {
  data() {
    return {
      isLoggedIn: true,
    }
  }
}
</script>


7. 處理事件

<template>
  <div>
    <button v-on:click="increment">Click me</button>
  </div>
</template>

<script>
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count += 1
      console.log('Count:', this.count)
    }
  }
}
</script>


8. 使用 v-for 列表渲染

<template>
  <div>
    <ul>
      <li v-for="item in items" :key="item.id">{{ item.name }}</li>
    </ul>
  </div>
</template>

<script>
export default {
  data() {
    return {
      items: [
        { id: 1, name: 'Apple' },
        { id: 2, name: 'Banana' },
        { id: 3, name: 'Orange' }
      ]
    }
  }
}
</script>


9. 使用 Vue Router（管理路由）

npm install vue-router

// src/router/index.js
import Vue from 'vue'
import Router from 'vue-router'
import Home from '../components/Home.vue'
import About from '../components/About.vue'

Vue.use(Router)

export default new Router({
  routes: [
    { path: '/', component: Home },
    { path: '/about', component: About }
  ]
})


import Vue from 'vue'
import App from './App.vue'
import router from './router'

Vue.config.productionTip = false

new Vue({
  render: h => h(App),
  router
}).$mount('#app')


10. 使用 Vuex（狀態管理）

npm install vuex
// store.js
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment(state) {
      state.count += 1
    }
  },
  actions: {
    increment({ commit }) {
      commit('increment')
    }
  }
})

-------------------------------------------------------------------
						Framwork  3
-------------------------------------------------------------------
1. 安裝 Angular 環境
2. 基本的 Angular 組件結構
    HTML 模板（顯示內容）
	CSS 樣式（設置樣式）
	TypeScript 類（控制邏輯和行為）
	
ng generate component hello-world
// hello-world.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-hello-world',
  templateUrl: './hello-world.component.html',
  styleUrls: ['./hello-world.component.css']
})
export class HelloWorldComponent {
  message: string = 'Hello, Angular!';
}

<!-- hello-world.component.html -->
<h1>{{ message }}</h1>

/* hello-world.component.css */
h1 {
  color: #42b983;
}


3. 將組件渲染到頁面
<!-- app.component.html -->
<app-hello-world></app-hello-world>

4. 使用 Angular 模塊（Modules）
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { HelloWorldComponent } from './hello-world/hello-world.component';

@NgModule({
  declarations: [
    AppComponent,
    HelloWorldComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


5. 使用 Angular 的 data binding 和事件綁定

<!-- app.component.html -->
<p>{{ message }}</p>

<!-- app.component.html -->
<img [src]="imageUrl" />

<!-- app.component.html -->
<button (click)="onClick()">Click me</button>


<!-- app.component.html -->
<input [(ngModel)]="message" />


6. 使用服務來共享數據

ng generate service data

// data.service.ts
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class DataService {
  private message: string = 'Hello from Service!';

  getMessage() {
    return this.message;
  }

  setMessage(newMessage: string) {
    this.message = newMessage;
  }
}


// app.component.ts
import { Component } from '@angular/core';
import { DataService } from './data.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  message: string;

  constructor(private dataService: DataService) {
    this.message = this.dataService.getMessage();
  }

  changeMessage() {
    this.dataService.setMessage('New message from Component');
    this.message = this.dataService.getMessage();
  }
}


<!-- app.component.html -->
<p>{{ message }}</p>
<button (click)="changeMessage()">Change Message</button>


7. 路由（Angular Router）
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'about', component: AboutComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


<!-- app.component.html -->
<nav>
  <a routerLink="/">Home</a>
  <a routerLink="/about">About</a>
</nav>
<router-outlet></router-outlet>


// home.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  template: `<h2>Home Page</h2>`,
})
export class HomeComponent { }


// about.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-about',
  template: `<h2>About Page</h2>`,
})
export class AboutComponent { }


8. 表單處理

<!-- app.component.html -->
<form #form="ngForm">
  <input type="text" name="username" ngModel />
  <button type="submit" [disabled]="form.invalid">Submit</button>
</form>






